#+title: fake_fastgithub 开发记录
#+author: ysouyno
#+options: ^:nil

* 从零开始 <2024-05-30 周四>

~FastGithub~ 是一个非常优秀的工具，每天都在用，同时对于域有特殊的效果。我想将它再完善一下，主要适应自自己的使用方式。但目前有两个难点：

+ 不了解 ~csharp~ ，很难下手。
+ 不了解网络概念，比如 ~CDN~ ， ~反向代理~ 等等。

从昨天的调查发现， ~FastGithub~ 使用的是 ~ASP.NET Core~ 工程类型，并使用 ~YARP~ 实现反向代理，昨天已经写了两个小 ~demo~ 大概了解了这两个知识点，所以今天就直接动手了，先创建一个 ~ASP.NET Core Empty~ 工程，然后替换 ~Program.cs~ 中的默认代码如下：

#+begin_src csharp
  namespace fake_fastgithub
  {
      class Program
      {
          public static void Main(string[] args)
          {
              Console.WriteLine("fake_fastgithub");
              var options = new WebApplicationOptions
              {
                  Args = args,
              };
              CreateWebApplication(options).Run(/*singleton: true*/);
          }

          private static WebApplication CreateWebApplication(WebApplicationOptions options)
          {
              var builder = WebApplication.CreateBuilder(options);
              var app = builder.Build();
              app.MapGet("/", () => "Hello World!");

              return app;
          }
      }
  }
#+end_src

** ~ServiceExtensions~ 是怎么建立联系的？

原工程中的 ~singleton~ 在新工程中无法编译通过，发现 ~singleton~ 是在 ~ServiceExtensions~ 类中似乎重写了 ~Run~ 函数，但是我没有 ~ServiceExtensions~ 是怎么建立上联系的？

取消 ~TODO~ ：这 ~ServiceExtensions~ 类看来就是为了注册 ~windows~ 服务的，有违的我初衷，所以就不追这个细节了。

** 添加 ~Serilog~ 功能

使用 ~NuGet~ 安装：

+ 安装 ~Serilog.Sinks.Console~ 和 ~Serilog.Sinks.File~ 日志功能。
+ 为了用上 ~UseSerilog~ 函数，你还得安装 ~Serilog.Extensions.Hosting~ 。
+ 为了用上 ~ReadFrom.Configuration~ ，你还得安装 ~Serilog.Settings.Configuration~ 。

** 添加 ~kestrel~ 扩展

#+begin_quote
Class Library

A project for creating a class library that targets .NET or .NET Standard
#+end_quote

+ 创建一个 ~Class Library~ 类型的工程 ~fake_fastgithub.HttpServer~ ， ~vs~ 中有众多的 ~Class Library~ ，请选择这个（见上）。
+ 创建 ~KestrelServerExtensions~ 类，并新增 ~NoLimit()~ 方法。
+ 右键新建的工程，选择 ~Edit Project File~ 菜单，添加如下，这样在 ~Dependencies~ 的 ~Frameworks~ 中就可以看到 ~Microsoft.AspNetCore.App~ 了， ~KestrelServerOptions~ 类型也就不报错了。

#+begin_src xml
  <ItemGroup>
    <FrameworkReference Include="Microsoft.AspNetCore.App" />
  </ItemGroup>
#+end_src

+ 然后将自动生成的命名空间从 ~fake_fastgithub.HttpServer~ 修改为 ~fake_fastgithub~ ，这样 ~fake_fastgithub.HttpServer~ 就编译成功了。

但是此时 ~fake_fastgithub~ 却编译失败：

#+begin_quote
error CS0579: Duplicate 'global::System.Runtime.Versioning.TargetFrameworkAttribute' attribute
#+end_quote

** 更改目录结构

~CS0579~ 这个错误可能跟目录结构有关：

+ 创建一个空的解决方案 ~Blank Solution~ ，让 ~vs~ 来管理各子工程。
+ 同时这样的话，各个子工程生成的 ~exe~ 或 ~dll~ 都在同一个目录下。

经过这样修改后，现在编译错误就正常多了：

#+begin_quote
error CS1061: 'KestrelServerOptions' does not contain a definition for 'NoLimit'
#+end_quote

** 解决 ~CS1061~ 这个错误

在 ~fake_fastgithub~ 项目中设置 ~Dependencies~ 的关联工程 ~fake_fastgithub.HttpServer~ 即可。

目前所有代码编译都成功！

** 新增 ~fake_fastgithub.Configuration~ 工程

尝试添加 ~ListenHttpsReverseProxy~ 函数，要用到 ~GlobalListener.HttpsPort~ ，它属于 ~fake_fastgithub.Configuration~ 工程，添加了该工程及 ~GlobalListener~ 类后，目前编译报错：

#+begin_quote
error CS0103: The name 'GlobalListener' does not exist in the current context
#+end_quote

暂时先用 ~443~ 代替 ~GlobalListener.HttpsPort~ 让编译通过。

* <2024-06-03 周一>

** 修复上节 ~CS0103~ 错误

+ 要在依赖的工程中加入 ~fake_fastgithub.Configuration~ 。
+ 要引入命名空间 ~using fake_fastgithub.Configuration;~ 。

** 添加 ~tls~ 及中间件

这里添加了好多代码，开始的时候还能敲敲，后面就复制粘贴了。目前的状态：不能生成 ~fake_fastgithub.key~ 文件，因为有如下错误：

#+begin_quote
System.InvalidOperationException: 'No service for type 'fake_fastgithub.HttpServer.Certs.CertService' has been registered.'
#+end_quote

如图：

#+attr_html: :width 800
[[file:images/usetls_0.png][file:images/usetls_0.png]]

我查了原工程中的引用，可能还要添加 ~AddReverseProxy~ 函数。

为了用上 ~AddHttpForwarder()~ ，安装 ~Yarp.ReverseProxy~ 。

在添加了 ~AddReverseProxy~ 函数后，目前可以生成 ~fake_fastgithub.key~ 和 ~fake_fastgithub.cer~ 文件了。并且 ~https:443~ 反向代理服务器可以启动成功。

* <2024-06-26 周三>

** 重新开始

花了一上午的时间尝试原项目的各个 ~commit~ ，被我发现 ~4faa241b87712222e13047dd2d46430f23144d3b（挑选可用且最快的 ip）~ 该 ~commit~ 就已经有了我需要的功能（域环境下依然可以 ~git push~ ）。

所以我打算在此 ~commit~ 上来重新开始。

经过尝试发现该 ~commit~ 更好用，最新版下 ~git push~ 成功一次后过了一两分钟后就再次 ~push~ 大概率就失败了，需要重新退出并启动该软件，多次尝试下才会再次 ~push~ 成功。

从本 ~commit~ 的日志输出来看，估计是此 ~commit~ 下当获得到最新的 ~ip~ 时，即可用的 ~ip~ 时，一直使用该地址，所以会一直成功；而最新版可能更新频率太快导致之前可用的 ~ip~ 被更新掉了。

该 ~commit~ 也有一个问题就是如果是从 ~114.114.114.114~ 中获得的 ~ip~ ，它肯定是不可用的（日志输出会显示警告），你一直 ~push~ 就会一直失败。测算发现，该间隔是两分钟，即两分钟后再次 ~push~ ，就是重新去获取 ~ip~ 。

** 关于 ~Microsoft.Extensions~ 的引入

可能还是不太熟， ~Microsoft.Extensions~ 位于 ~Microsoft.AspNetCore.App~ 中，所以怎么添加它，方便就在这篇文章中。

** 关于 ~System.InvalidOperationException~ 异常（一）

如图：

#+attr_html: :width 800
[[file:images/exception_0.png][file:images/exception_0.png]]

同时发现这里有一处警告：

#+attr_html: :width 800
[[file:images/warning_0.png][file:images/warning_0.png]]

所以可能的问题就在这里：

#+begin_src text
  CertService.cs(85,20,85,74): warning CS8603: Possible null reference return.
#+end_src

* <2024-06-28 周五>

** 关于 ~System.InvalidOperationException~ 异常（二）

如图：

#+attr_html: :width 800
[[file:images/exception_1.png][file:images/exception_1.png]]

依然是这个异常，在当前 ~commit~ 下，该异常产生的地方变了。

** 关于 ~CS1061~ 错误

#+begin_src csharp
  /// <summary>
  /// 获取 TlsSniPattern
  /// </summary>
  /// <returns></returns>
  public TlsSniPattern GetTlsSniPattern()
  {
      // error CS1061: 'string' does not contain a definition for 'None'
      // and no accessible extension method 'None' accepting a first
      // argument of type 'string' could be found (are you missing a
      // using directive or an assembly reference?)
      if (TlsSni == false)
      {
          return fake_fastgithub.TlsSniPattern.None;
      }

      if (string.IsNullOrEmpty(TlsSniPattern))
      {
          return fake_fastgithub.TlsSniPattern.Domain;
      }

      return new TlsSniPattern(TlsSniPattern);
  }
#+end_src

不知道这里为什么会有这个错误？必须要加上 ~fake_fastgithub~ 命名空间限定，虽然该类就在此 ~fake_fastgithub~ 命名空间里。

* <2024-06-29 周六>

** 关于 ~System.InvalidOperationException~ 异常（修复）

#+begin_src text
  Unhandled exception. System.InvalidOperationException: Unable to
  resolve service for type 'fake_fastgithub.FastGithubConfig' while
  attempting to activate 'fake_fastgithub.RequestResolver'.
#+end_src

关于这个异常其中是由于 ~FastGithubConfig~ 没有被 ~依赖注入~ 所导致，即代码中的 ~TryAddSingleton~ ，但是我明明在 ~AddConfiguration~ 函数中已经注入了呀！再细看发现居然将 ~FastGithubConfig~ 错误的写成了 ~FastGithubOptions~ 。

因为 ~RequestResolver~ 类是第一个运行的，所以 ~依赖注入~ 在构造它时发现它的构造函数参数 ~FastGithubConfig~ 没有被注入，所以报异常。

我一直在想这些类的构造函数一直没有被显式调用，它们的构造函数参数，有两个，有三个，有四个的，那到底是怎么传参的？现在终于知道了，原来都是通过像 ~TryAddSingleton~ ， ~TryAddScoped~ ， ~TryAddTransient~ 这样的函数进行传参的。

** 三个端口均被占用

目前有此异常不知道如何解决：

#+begin_src text
  warn: fake_fastgithub[0]
  由于 tcp 端口 22 已经被其它进程占用，github 的 ssh 代理功能将受限
  warn: fake_fastgithub[0]
  由于 tcp 端口 80 已经被其它进程占用，http 反向代理功能将受限
  Unhandled exception. System.Exception: 由于 tcp 端口 443 已经被其它进程占用，fake_fastgithub 无法进行必须的 https 反向代理
#+end_src

我添加了 ~Yarp.ReverseProxy~ ，从字面上看，以为用上了 ~AddHttpForwarder~ 这个 ~转发函数~ ，是不是就可以解决这个问题？答案是不行！

** 三个端口均被占用（修复）

又是因为代码抄错了的缘故（少了 ~== false~ ），现已解决。

** 关于 ~HttpClientHandler.SendAsync~ 函数

这个 ~HttpClientHandler.SendAsync~ 函数应该就是灵魂，加上了它，虽然不是公司的域环境，它确实 ~push~ 成功了。但是在上个 ~commit~ （ ~e84454b00a5f5b0609c61c45bb99bd1be767dcf0~ ）时，即没有实现该函数，会有如下提示：

#+begin_src shellsessin
$ git push origin dev
Connection reset by 20.205.243.166 port 22
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
#+end_src

另外发现一个问题，我在 ~HttpClientHandler::SendAsync~ 中，还有其它函数中加的 ~Console.WriteLine~ 调试日志都没有显示出来，同时又回想到还有一个 ~RequestLoggingMiddleware~ 中间件没有实现，是不是这个原因导致的？

* <2024-06-30 周日>

** 关于 ~netsh~ 命令

目前用到的所有 ~netsh~ 命令如下：

#+begin_src text
  interface ipv4 delete dns "以太网" all
  interface ipv4 add dns "以太网" 127.0.0.1 validate=no
  interface ipv4 add dns "以太网" fe80::1%11 validate=no
  interface ipv4 add dns "以太网" 127.0.0.1 validate=no
  interface ipv4 add dns "以太网" 192.168.1.1 validate=no
  interface ipv4 add dns "以太网" fe80::1%11 validate=no
#+end_src

** 关于 ~ToString~ 函数

我说怎么原项目可以显示：

#+begin_src text
  info: fake_fastgithub.DnscryptProxyHostedService[0]
  dnscrypt-proxy 启动成功
#+end_src

而此项目却只能显示它的命令空间：

#+begin_src text
  info: fake_fastgithub.DnscryptProxyHostedService[0]
  fake_fastgithub.DnscryptProxy 启动成功
#+end_src

因此只要重写 ~DnscryptProxy::ToString~ 即可。
